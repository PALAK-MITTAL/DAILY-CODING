#include <iostream>
using namespace std;

class Deque{
public:
  int *arr;
  int front;
  int rear;
  int size;

  Deque(int size){
    arr=new int[size];
    this->size=size;
    front=-1;
    rear=-1;
  }

  void pushBack(int ele){
     //case of overflow
  if( (rear==size-1 && front==0) || (rear+1==front) ){
    cout<<"overflow not possible to insert."<<endl;
  }

  //empty case
  else if(front==-1 && rear==-1){
    front++; rear++; arr[rear]=ele;
    return;
  }
  //circular case
  else if(front!=0 && rear==size-1){
    rear=0;arr[rear]=ele;
  }
  //normal case
  else{
  rear++;
  arr[rear]=ele;
  }
  return;
  }

  void pushFront(int val){
     //case of overflow
  if( (rear==size-1 && front==0) || (rear+1==front) ){
    cout<<"overflow not possible to insert."<<endl;
  }
    else if(front==-1 && rear==-1){
      //empty case
      front++; rear++;
      arr[front]=val;
      return;
    }
    //circular case
    else if(front==0 && rear!=size-1){
      front=size-1;
      arr[front]=val;
    }
    else{
      //normal case
      front--;
      arr[front]=val;
      return;
    }
  }

  void popFront(){

 if(front==-1 && rear==-1){
    cout<<"underflow not able to pop."<<endl; return;
  }
  else if(front==rear) { arr[front]=-1; front=-1; rear=-1;}
  //circular case
  else if(front==size-1){ arr[front]=-1; front=0;}
  else { arr[front]=-1; front++;}

  }

  void popBack(){

  if(front==-1 && rear==-1){
    cout<<"underflow not able to pop."<<endl; return;
  }
  else if(front==rear) { arr[rear]=-1; front=rear=-1;}
  else if(rear==0){
    arr[rear]=-1;
    rear=size-1;
  }
  else { arr[rear]=-1; rear--;}

  }

  bool empty(){
     return (front==-1 && rear==-1);
  }

  int getSize(){
    if(front==-1 && rear==-1) return -1;
    return this->size;
  }

};

int main() {




  return 0;
}
