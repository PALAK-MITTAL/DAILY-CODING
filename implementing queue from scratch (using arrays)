//implementing queue from scratch (using arrays)
// operations in 0(1) time complexity

#include <iostream>
using namespace std;

class Queue{
  public:
    int *arr;
    int front;
    int rear;
    int size;
 
 Queue(int size){
  arr=new int[size];
  this->size=size;
  front=-1;
  rear=-1;
 }

 int getFront(){
  if(front==-1 && rear==-1){
    cout<<"empty queue cant access front."<<endl;
    return -1;
  }
  return arr[front];
 }

 int getSize(){
  if(front==-1 && rear==-1) return 0;
  return rear-front+1;
 }

void push(int ele){
  //case of overflow
  if(rear==size-1){
    cout<<"overflow not possible to insert."<<endl;
  }

  //empty case
  else if(front==-1 && rear==-1){
    front++; rear++; arr[rear]=ele;
    return;
  }
  //normal case
  else{
  rear++;
  arr[rear]=ele;
  }
  return;
}

bool empty(){
  if(front==-1 && rear==-1) return true;
  return false;
}

bool isFull(){
  return rear == size-1;
}

void pop(){
  if(front==-1 && rear==-1){
    cout<<"underflow not able to pop."<<endl; return;
  }
  else if(front==rear) { arr[front]=-1; front=rear=-1;}
  else { arr[front]=-1; front++;}
}

int getRear(){
  if(front==-1 && rear==-1){
    cout<<"empty not possible."<<endl;
    return -1;
  }
  return arr[rear];
}

void print(){
  int i=front;
  while(i<=rear){
    cout<<arr[i]<<" ";
    i++;
  }
  cout<<endl;
}

};


int main() {
  
// push rear se hota hai and pop front se hota hai in queue
   Queue q(5);
cout<<"Printing queue before pushing any element: ";
q.print();

   q.push(10);
   q.push(20);
   q.push(30);
   q.push(40);
   q.push(50);

cout<<"Printing queue: ";
q.print();   

cout<<"size:"<<q.getSize()<<endl;

q.pop();
cout<<"size of queue after pop 1 element:"<<q.getSize()<<endl;

cout<<endl<<"element at front of queue:"<<q.getFront()<<endl;
cout<<"element at last(rear) of queue:"<<q.getRear()<<endl;

cout<<"is queue empty(0/1)? " <<q.empty()<<endl;

cout<<"Printing queue: ";
q.print();

  return 0;
}
